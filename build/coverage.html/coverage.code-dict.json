{"/home/travis/build/npmtest/node-npmtest-git-fish/test.js":"/* istanbul instrument in package npmtest_git_fish */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-fish/lib.npmtest_git_fish.js":"/* istanbul instrument in package npmtest_git_fish */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_git_fish = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_git_fish = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-git-fish/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-git-fish && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_git_fish */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_git_fish\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_git_fish.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_git_fish.rollup.js'] =\n            local.assetsDict['/assets.npmtest_git_fish.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_git_fish.__dirname + '/lib.npmtest_git_fish.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-fish/node_modules/git-fish/index.js":"#!/usr/bin/env node\nvar http   = require('http');\nvar path   = require('path');\nvar spawn  = require('child_process').spawn;\nvar qs     = require('querystring');\nvar subarg = require('subarg');\nvar argv = subarg(process.argv.slice(2));\n\n/***\n * Anything in example.json can be passed via\n * commandline args, e.g.:\n *\n * $ index.js --port 3000 --config foo.json --token go-fish \\\n *      --gofish [ --script \"./test/script.js\", --branch \"master\" ]\n *\n *  See `subarg` (https://github.com/substack/subarg) for details on how\n *  this works.\n ***/\n\nvar config;\ntry {\n    config = require(path.resolve(process.env.TEST_CONFIG||argv.config||'config.json'));\n} catch (e) {\n    console.error('RTFM yo! You need a config file!');\n    console.trace(e);\n    process.exit(1);\n}\n\nconfig.port = process.env.TEST_PORT || argv.port || config.port || 8000;\n\nvar server = http.createServer(function (request, response) {\n\n    var json = (request.headers['content-type'] === 'application/json' ||\n                    request.headers['Content-Type'] === 'applciation/json');\n\n    var parts = request.url.split('?');\n\n    request.pathname = parts[0];\n    request.query    = qs.parse(parts[1]);\n\n    if (request.method !== 'POST' ||\n            request.query.token !== config.token) {\n        console.error('Forbidden request: %s', request.url);\n        response.writeHead(403, {'Content-Type': 'text/plain'});\n        response.end('Forbidden 403\\n');\n        return;\n    }\n\n    var endpoint = request.pathname;\n    if (endpoint.indexOf('/') === 0) {\n        endpoint = endpoint.replace('/', '');\n    }\n\n    if (typeof config[endpoint] === 'undefined') {\n        console.trace(new Error('404: Missing action: ' + endpoint));\n        response.writeHead(404, {'Content-Type': 'text/plain'});\n        response.end('File Not Found 404\\n');\n        return;\n    }\n\n    var body = '';\n    request.on('data', function (data) {\n        body += data;\n    });\n\n    request.on('end', function () {\n        if (json) {\n            body = JSON.parse(body);\n        } else {\n            body = qs.parse(body);\n            Object.keys(body).forEach(function (key) {\n                try {\n                    body[key] = JSON.parse(body[key]);\n                } catch (e) {\n                    // don't fail on content that doesn't parse\n                }\n            });\n            body = body.payload;\n        }\n\n        if (body.zen) {\n            // Handle github ping by bouncing the zen.\n            console.log('Got ping from ' +\n                (body.hook && body.hook.url) + ': ' + body.zen);\n            response.writeHead(200, {'Content-Type': 'text/plain'});\n            response.end(body.zen);\n            return;\n        }\n\n        // Github hooks report the branch name in body.ref.\n        // Travis hooks report the banch name in body.branch.\n        var ref = body.ref || body.branch;\n        if (typeof ref === 'undefined') {\n            console.error('Invalid post:');\n            console.trace(new Error(body));\n            response.writeHead(500, {'Content-Type': 'text/plain'});\n            response.end('Application Error 500\\n');\n            return;\n        }\n\n        var branch = config[endpoint].branch;\n        if (branch) {\n            var skip = function() {\n                console.warn('Skipping request:\\n -> %s doesn\\'t match %s', ref, branch);\n                response.writeHead(200, {'Content-Type': 'text/plain'});\n                response.end();\n            };\n\n            if (Array.isArray(branch)) {\n                if (!branch.some(function(i) { return ref.match(i) })) return skip();\n            } else {\n                if (!ref.match(branch)) return skip();\n            }\n\n        }\n\n        if (config[endpoint].script) {\n            console.log(' Running:\\n -> %s', config[endpoint].script);\n            spawn(path.resolve(process.cwd(), config[endpoint].script), [], {\n                detached: true,\n                stdio: 'inherit'\n            });\n            response.writeHead(200, {'Content-Type': 'text/plain'});\n            response.end();\n            return;\n        }\n    });\n\n}).listen(config.port);\n\nconsole.log('Server running on port ', config.port);\n\nObject.keys(config).forEach(function (key) {\n    if (key !== \"token\" && key !== \"port\") {\n        console.log(' -> /%s', key);\n    }\n});\n\nmodule.exports = server;\n","/home/travis/build/npmtest/node-npmtest-git-fish/node_modules/git-fish/bin/gitfish":"#!/usr/bin/env node\nvar fs = require('fs');\nvar path = require('path');\nvar forever = require('forever');\nvar subarg = require('subarg');\nvar async = require('async');\nvar argv = subarg(process.argv.slice(2));\n\nvar action = argv._.join(''); // join action to fail on multiple or error\nvar daemonize = (typeof argv.daemonize !== 'undefined');\n\n// forced forever options\nvar options = {\n    silent: false,\n    killTree: true,\n    minUptime: 4000,\n    spinSleepTime: 2000,\n    sourceDir: path.resolve(__dirname, '..'),\n    options: []\n};\n\n// read forever options from command line args or default\nif (argv.config) {\n    ensureConfig(argv.config);\n    options.options.push('--config');\n    options.options.push(argv.config);\n}\n\nif (argv.port) {\n    options.options.push('--port');\n    options.options.push(argv.port);\n}\n\nif (argv.token) {\n    options.options.push('--token');\n    options.options.push(argv.token);\n}\n\noptions.logFile = argv.logFile || '/tmp/gitfish.log';\noptions.pidFile = argv.pidFile || '/tmp/gitfish.pid';\n\nif (daemonize) {\n    // log to console when not daemonized\n    options.outFile = argv.outFile || options.logFile;\n    options.errFile = argv.errFile || options.logFile;\n}\n\nif (argv.plain) {\n    options.plain = argv.plain;\n}\nif (argv.verbose) {\n    options.verbose = argv.verbose;\n}\nif (argv.debug) {\n    options.debug = argv.debug;\n}\n\nvar script = 'index.js';\n//var gitfish = new (forever.Monitor)(script, options);\n\nswitch (action) {\n    case 'config':\n        buildConfiguration();\n        break;\n    case 'status':\n        list(function (err, msg) {\n            if (err) {\n                usage(err);\n            }\n\n            if (msg) {\n                console.log('gitfish is currently running');\n                console.log(msg);\n            } else {\n                console.log('gitfish is not running');\n            }\n        });\n        break;\n    case 'start':\n        list(function (err, msg) {\n            if (err) {\n                usage(err);\n            }\n\n            if (msg) {\n                console.log('gitfish is currently running');\n                console.log(msg);\n            } else {\n                if (daemonize) {\n                    console.log('Starting gitfish:');\n                    forever.startDaemon(script, options);\n\n                    // give it a sec...\n                    setTimeout(function () {\n                        list(function (err, msg) {\n                            if (msg) {\n                                console.log('> started as:');\n                                console.log(msg);\n                            } else {\n                                console.trace(new Error('running gitfish instance expected but not found'));\n                            }\n                        });\n                    }, 500);\n                } else {\n                    var child = forever.start(script, options);\n                    forever.startServer(child);\n                }\n            }\n        });\n        break;\n    case 'stop':\n        list(function (err, msg) {\n            if (err) {\n                usage(err);\n            }\n\n            if (!msg) {\n                console.log('gitfish is not running');\n            } else {\n                console.log('Stopping gitfish:');\n                console.log(msg);\n                forever.stop(script);\n\n                setTimeout(function () {\n                    list(function (err, msg) {\n                        if (!msg) {\n                            console.log('> stopped.');\n                        }\n                    });\n                }, 500);\n            }\n            });\n        break;\n    case 'restart':\n        list(function (err, msg) {\n            if (err) {\n                usage(err);\n            }\n\n            if (!msg) {\n                console.log('gitfish is not running');\n            } else {\n                console.log('Restarting gitfish');\n                forever.restart(script);\n                // give it a sec...\n                setTimeout(function () {\n                    list(function (err, msg) {\n                        if (msg) {\n                            console.log('> restarted as:');\n                            console.log(msg);\n                        } else {\n                            console.trace(new Error('running gitfish instance expected but not found'));\n                        }\n                    });\n                }, 500);\n            }\n        });\n        break;\n    default: usage();\n}\n\nfunction list(callback) {\n    forever.list(script, callback);\n}\n\nfunction usage(err) {\n    var exitStatus = 0;\n    if (err) {\n        console.error('An error occured.');\n        console.trace(err);\n        exitStatus = 1;\n    }\n\n    console.log('Usage: gitfish [forever options] action\\n'\n              + '\\n'\n              + ' Gitfish Actions\\n'\n              + '\\n'\n              + '   config   build initial config file\\n'\n              + '   start    start gitfish\\n'\n              + '   help     show this message\\n'\n              + '\\n'\n              + ' Daemonized Actions\\n'\n              + '\\n'\n              + '   stop     stop gitfish (when daemonized)\\n'\n              + '   restart  restart gitfish (when daemonized)\\n'\n              + '   status   status of gitfish (when de\\n'\n              + '\\n'\n              + ' Optional Gitfish Options\\n'\n              + '\\n'\n              + '   --daemonize : start gitfish daemonized\\n'\n              + '   --config    : default is `$CWD/config.json`\\n'\n              + '   --port      : overide port from config\\n'\n              + '   --token     : overide token from config\\n'\n              + '\\n'\n              + ' Supported Forever Options\\n'\n              + '\\n'\n              + '   --logFile [file] : forever log file location # default: /tmp/gitfish.log\\n'\n              + '   --outFile [file] : stdout file location      # default: forever log file\\n'\n              + '   --errFile [file] : stderr file location      # default: forever log file\\n'\n              + '   --pidFile [file] : pid file location         # default: /tmp/gitfish.pid\\n'\n              + '   --max     [n]    : max restarts on error\\n'\n              + '   --plain          : disable command line colors\\n'\n              + '   --verbose        : verbose forever output\\n'\n              + '\\n'\n              + ' What is forever? https://github.com/nodejitsu/forever\\n');\n\n    process.exit(exitStatus);\n}\n\n\n// config handling\nfunction ensureConfig(cf) {\n    // Default config file, if not specified.\n    if (typeof cf === 'undefined') {\n        cf = path.resolve(process.cwd(), 'config.json');\n    }\n\n    // Config file must exist.\n    if (!fs.existsSync(cf)) {\n        usage(new Error('Config file ('+cf+') wasn\\'t found.'));\n    }\n\n    return cf;\n}\n\nfunction buildConfiguration() {\n    var c = {};\n    var script;\n\n    function getHook(answer) {\n        script = answer.trim();\n        c[script] = undefined;\n    }\n\n    function getHookScript(answer) {\n        c[script].script = answer.trim();\n    }\n\n    function getHookBranch(answer) {\n        c[script].branch = answer.trim();\n    }\n\n    var readline = require('readline');\n    var async    = require('async');\n    var read = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n\n    async.series([\n        function port(callback) {\n            read.question('Listener port? [8000] ', function (answer) {\n                c.port = parseInt((answer || '8000').trim(), 10);\n                callback();\n            });\n        },\n        function token(callback) {\n            read.question('Security token? [secret] ', function (answer) {\n                c.token = (answer || 'secret').trim();\n                callback();\n            });\n        },\n        function hook(callback) {\n            read.question('Hook endpoint? [script] ', function (answer) {\n                script = (answer || 'script').trim();\n                if (script.indexOf('/') === 0) {\n                    script = script.substring(1);\n                }\n                c[script] = {};\n                callback();\n            });\n        },\n        function hookscript(callback) {\n            read.question('Hook script? [PWD/script.js] ', function (answer) {\n                c[script].script = (answer || path.resolve(process.cwd(), 'script.js')).trim();\n                callback();\n            });\n        },\n        function hookbranch(callback) {\n            read.question('Hook branch filter? ', function (answer) {\n                if (answer) {\n                    c[script].branch = answer.trim();\n                }\n                callback();\n            });\n        }\n    ], function () {\n        read.close();\n        var out = path.resolve(process.cwd(), 'config.json');\n        fs.writeFile(out, JSON.stringify(c, null, 2), { encoding: 'utf8' }, function (err) {\n            if (err) {\n                console.trace(err);\n                process.exit(1);\n            }\n            console.log('Savd configuration to %s', out);\n            process.exit(0);\n        });\n    });\n}\n\n","/home/travis/build/npmtest/node-npmtest-git-fish/node_modules/git-fish/bin/gitfish.js":"require('../')({ config: process.argv[2] || 'config.json' });\n","/home/travis/build/npmtest/node-npmtest-git-fish/node_modules/git-fish/lib/logger.js":"var winston   = require('winston');\nvar transport = new (winston.transports.Console)({ json: false, timestamp: true });\nvar logger    = new (winston.Logger)({\n    level: 'info',\n    json: false,\n    timestamp: true,\n    exitOnError: false,\n    transports: [ transport ]\n});\n\nmodule.exports = logger;\n\n"}